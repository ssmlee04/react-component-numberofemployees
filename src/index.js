import React from "react";
import _ from "lodash";
import { Bar } from 'react-chartjs-2';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import dayjs from 'dayjs';
import dayjsPluginUTC from 'dayjs-plugin-utc';
dayjs.extend(dayjsPluginUTC);

export class NumberOfEmployees extends React.Component {
  constructor(props) {
    super(props);
    this.state = {

    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    const { profile } = this.props;
    if (!profile) return true;
    if (nextState.copied) return true;
    if (profile.ticker !== nextProps.profile.ticker) return true;
    return false;
  }

  render() {
    const { profile, imgProp = 'num_employees' } = this.props;
    const { copied } = this.state;
    if (!profile) {
      return (
        <div style={{ fontSize: 8 }}>Not available at this time... </div>
      );
    }
    if (profile[imgProp] && profile[imgProp].url) {
      const btnClass = copied ? 'react-components-show-url btn btn-sm btn-danger disabled font-8' : 'react-components-show-url btn btn-sm btn-warning font-8';
      const btnText = copied ? 'Copied' : 'Copy Img';
      return (
        <div className='react-components-show-button'>
          <img alt={`${profile.ticker} - ${profile.name} Employees and Productivity`} src={profile[imgProp].url} style={{ width: '100%' }} />
          <CopyToClipboard text={profile[imgProp].url || ''}
            onCopy={() => this.setState({ copied: true })}
          >
            <button className={btnClass} value={btnText}>{btnText}</button>
          </CopyToClipboard>
        </div>
      );
    }

    if (!profile || !profile.numbers || !profile.numbers.number_of_employees_ts) return null;
    if (!profile || !profile.numbers || !profile.numbers.revenue_per_employee_ts) return null;
    const number_of_employees_ts = profile.numbers.number_of_employees_ts || [];
    const revenue_per_employee_ts = profile.numbers.revenue_per_employee_ts || [];
    const number_of_employees = number_of_employees_ts.map(d => d.v);
    const revenue_per_employee = revenue_per_employee_ts.map(d => d.v / 1000);
    const data = {
      labels: number_of_employees_ts.map(d => dayjs.utc(d.ts).format('YYYYMM')),
      datasets: [{
        yAxisID: '1',
        type: 'line',
        fill: false,
        backgroundColor: 'darkred',
        borderColor: 'darkred',
        lineTension: 0.5,
        borderWidth: 1,
        pointRadius: 2,
        pointHoverRadius: 2,
        data: revenue_per_employee,
        label: 'Revenue Per Employee (k)'
      }, {
        yAxisID: '2',
        type: 'bar',
        fill: false,
        backgroundColor: 'gray',
        borderColor: 'gray',
        lineTension: 0.5,
        borderWidth: 1,
        pointRadius: 2,
        pointHoverRadius: 2,
        data: number_of_employees,
        label: 'Number Of Employees'
      }]
    };
    const max = _.max(number_of_employees);
    const min = _.min(number_of_employees);
    const barChartMin = max === min ? max / 2 : Math.max(2 * min - max, 0);
    const barChartMax = max === min ? max * 1.1 : max * 1.1;
    const options = {
      legend: {
        labels: {
          fontSize: 8,
          boxWidth: 10,
        }
      },
      scales: {
        xAxes: [{
          ticks: {
            fontSize: 8
          },
          barPercentage: 0.4
        }],
        yAxes: [{
                type: 'linear',
                display: true,
                position: 'left',
                id: '1',
                gridLines: {
                  display: false
                },
                labels: {
                  show: true
                },
                ticks: {
                  fontColor: 'darkred',
                  fontSize: 8,
                    callback: function(label, index, labels) {
                      return Math.floor(label);
                    }
                },
              },
              {
                type: 'linear',
                display: true,
                position: 'right',
                id: '2',
                labels: {
                  show: true
                },
                ticks: {
                  fontColor: 'gray',
                  fontSize: 8,
                  max: barChartMax,
                  min: barChartMin,
                  callback: function(label, index, labels) {
                    return Math.floor(label);
                  }
                },
              }]
      },
    };

    return (
      <div style={{ width: '100%', padding: 5, fontSize: 8 }}>
        <div style={{ color: 'darkred', fontWeight: 'bold' }}>{profile.ticker} - {profile.name} <span className='green'>Employees and Productivity</span></div>
        <Bar data={data} height={170} options={options} />
        <div style={{ fontSize: 8 }}>Generated by <span style={{ color: 'darkred' }}>@earningsfly</span> with <span style={{ fontSize: 16, color: 'red' }}>ðŸš€</span></div>
      </div>
    );
  }
}

export default NumberOfEmployees;
